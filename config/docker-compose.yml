version: '3.7'
# prometheus
# alertmanager
# node-exporter
# cadvisor
# grafana
# pushgateway

services:

  cadvisor:
    image: google/cadvisor:v0.33.0
    hostname: '{{.Service.Name}}'
    command: 
      - '-logtostderr' 
      - '-docker_only'
    networks:
      - backend
    ports:
      - '8080:8080'
    volumes:
      - '/var/run/docker.sock:/var/run/docker.sock:ro'
      - '/:/rootfs:ro'
      - '/var/run:/var/run'
      - '/sys:/sys:ro'
      - '/var/lib/docker/:/var/lib/docker:ro'
    deploy:
      mode: global
      placement:
        constraints: 
          - node.role == manager

  prometheus:
    image: prom/prometheus:v2.17.0
    hostname: '{{.Service.Name}}'
    networks:
      - frontend
      - backend
    ports:
      - '9090:9090'
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=${PROM_TSDB_RETENTION_TIME:-1d}'
      - '--storage.tsdb.retention.size=${PROM_TSDB_RETENTION_SIZE:-0}'
      - '--web.console.libraries=${PROM_WEB_CONSOLE_LIBRARIES:-/usr/share/prometheus/console_libraries}' 
      - '--web.console.templates=${PROM_WEB_CONSOLE_TEMPLATES:-/usr/share/prometheus/consoles}'
    volumes:
      - 'prom-data:/prometheus'
      - 'prom-web:/usr/share/prometheus'
    configs:
      - source: prom-conf
        target: /etc/prometheus/prometheus.yml
        mode: 0444
      #- source: prom-conf-nrules
      #  target: /etc/prometheus/swarm-node.rules.yml
      #  mode: 0440
      #- source: prom-task-trules
      #  target: /etc/prometheus/swarm-task.rules.yml
      #  mode: 0440
    deploy:
      placement:
        constraints: 
          - node.role == manager

  alertmanager:
    image: prom/alertmanager:v0.20.0
    hostname: '{{.Service.Name}}'
    networks:
      - frontend
      - backend
    ports:
      - 9093:9093
    #environment:
    #  - SLACK_URL=${SLACK_URL:-https://hooks.slack.com/services/TOKEN}
    #  - SLACK_CHANNEL=${SLACK_CHANNEL:-general}
    #  - SLACK_USER=${SLACK_USER:-alertmanager}
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
    volumes:
      - 'alert-data:/alertmanager'
    configs:
      - source: alert-conf
        target: '/etc/alertmanager/alertmanager.yml' 
        mode: 0444
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == manager

  node-exporter:
    image: prom/node-exporter:v0.18.1
    hostname: '{{.Service.Name}}'
    ports:
      - '9100:9100'
    networks:
      - frontend
      - backend
    volumes:
      - '/proc:/host/proc:ro'
      - '/sys:/host/sys:ro'
      - '/:/rootfs:ro'
    command: 
      - '--path.procfs=/host/proc' 
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.ignored-mount-points=^/(sys|proc|dev|host|etc)($$|/)'
    networks:
      - backend
    deploy:
      mode: global

  pushgateway:
    image: prom/pushgateway:v1.2.0
    hostname: '{{.Service.Name}}'
    ports:
      - '9091:9091'
    networks:
      - frontend
      - backend

  grafana:
    image: grafana/grafana:6.5.0
    hostname: '{{.Service.Name}}'
    networks:
      - frontend
      - backend
    ports:
      - '3000:3000'
    environment:
      GF_SECURITY_ADMIN_USER: ${GF_ADMIN_USER}
      GF_SECURITY_ADMIN_PASSWORD: ${GF_ADMIN_PASSWD}
      GF_USERS_ALLOW_SIGN_UP: "false"
      GF_INSTALL_PLUGINS: ${GF_PLUGINS}
    volumes:
      - 'grafana-data:/var/lib/grafana'
    configs:
      - source: grafana-conf
        target: /etc/grafana/grafana.ini
        mode: 0444
    deploy:
      placement:
        constraints: 
          - node.role == manager

networks:
  frontend:
    ipam:
      driver: default
      config:
        - subnet: 10.200.200.0/24
  backend:
    ipam:
      driver: default
      config:
        - subnet: 10.200.220.0/24

volumes:
  prom-data:
    driver_opts:
      type: none
      device: ${PROM_VOL}/data
      o: bind
  prom-web:
    driver_opts:
      type: none
      device: ${PROM_VOL}/web
      o: bind
  alert-data:
    driver_opts:
      type: none
      device: ${ALMG_VOL}/data
      o: bind
  grafana-data:
    driver_opts:
      type: none
      device: ${GF_VOL}/data
      o: bind

configs:
    #prom-conf-nrules:
    #    file: ${PROM_CONF}/conf/swarm-node.rules.yml
    #prom-conf-trules:
    #    file: ${PROM_CONF}/conf/swarm-task.rules.yml
  prom-conf:
    file: ${PROM_CONF}/conf/prometheus.yml
  grafana-conf:
    file: ${GF_CONF}/conf/grafana.ini
  alert-conf:
    file: ${ALMG_CONF}/conf/alertmanager.yml
